package com.comp.drools;

import model.beans.ServiceUserBean;
import model.beans.SubstanceAccumBean;
import model.beans.SubstanceBean
import model.beans.AttendanceBean;
import model.beans.TransactionBean;
import Rules.SubstanceRules;
import model.data.cmsQueryServiceUser;
import model.data.cmsQueryEligibility;
import model.data.cmsQuerySubstance;
import web.services.serviceUserService;

import java.lang.Integer;
import java.util.ArrayList;
import java.util.List;

//Ld March 2014
//Rules govern the consequences for the user's test result and amount creditted

//The service user has tested negative for required substances and they have over 20 euro credit
rule "Service user's account has enough to withdraw AND is eligible for outings/visits"
    no-loop true
when
    $result: ServiceUserBean( accountDetails.Account_Balance >= 20 , dateToClean.card == "none")
then
	for(int i=0; i<   $result.getEligibilityBeans().size(); i++) 
	{
		if($result.getEligibilityBeans().get(i).getId().equals("1"))
		{
	    	$result.getEligibilityBeans().get(i).setActive("Y");
	    	cmsQueryEligibility.changeEligibility($result,1,0);
	    	
	   	}
	}
    
end
//the service user has progressed, and are negative off all required substances
rule "Service user is eligible for Group Recreational Outing"
    no-loop true
when
	 $result : ServiceUserBean(streamDetails.supportLevel != 1)
     $r: ServiceUserBean(dateToClean.card == "none" ) from $result
   
then
	for(int i=0; i<   $result.getEligibilityBeans().size(); i++) 
	{
		if($result.getEligibilityBeans().get(i).getId().equals("2"))
		{
	    	$result.getEligibilityBeans().get(i).setActive("Y");
	    	cmsQueryEligibility.changeEligibility($result,2,0);
	    	
	   	}
	}
end

rule "Service user's account does NOT have enough to withdraw"
    no-loop true
when
    $result: ServiceUserBean( accountDetails.Account_Balance < 20 )
then
    
   for(int i=0; i<   $result.getEligibilityBeans().size(); i++) 
	{
		if($result.getEligibilityBeans().get(i).getId().equals("1"))
		{
	    	$result.getEligibilityBeans().get(i).setActive("N");
	    	cmsQueryEligibility.changeEligibility($result,1,0);
	    	
	   	}
	}
end

rule "Substance abuse therefor NO outings/visits/credit-withdraw"
    lock-on-active true
when
    $result: ServiceUserBean(dateToClean.card != "none" )
then
    
    serviceUserService service = new serviceUserService();
    service.changeEligibility($result,"N");    
    
end

/*rule "unsupported stream for outings/visits "
    lock-on-active true
when
    $result: ServiceUserBean(streamDetails.streamId != "2" , dateToClean.card != "none")
    
then
	System.out.println($result.getEligibilityBeans().size());
	for(int i=0; i < $result.getEligibilityBeans().size(); i++)
	{
		if($result.getEligibilityBeans().get(i).getId().toString().equals("2") && $result.getEligibilityBeans().get(i).getActive().toString().equals("Y") )
		{
		    serviceUserService service = new serviceUserService();
		    service.changeEligibility($result,"N");    
		    System.out.println("happened");
		    
		}
	}
	System.out.println("service user's not eligible for visits/outings");
end*/

rule "Service user must regress down a stream due to continual misbehavious (substance abuse)"
	lock-on-active true
when
	$result : ServiceUserBean(dateToClean.card == "RED" , streamDetails.supportLevel != 1 )
then
	serviceUserService service = new serviceUserService();
	$result.getStreamDetails().setSupportLevel($result.getStreamDetails().getSupportLevel()-1);
    service.changeStream($result);   
	
end

rule "service user is entitled to NO weekday TA"
    lock-on-active true
    no-loop true
    dialect "java"
when
	  $result : ServiceUserBean()
      $inter : SubstanceAccumBean(substance.equals("Opiate"), accum <= 1) from $result.subAccums
then
 	
	cmsQueryEligibility.changeEligibility($result,3,0);
   
    
end

rule "service user is entitled to 1 weekday TA"
    lock-on-active true
    no-loop true
    dialect "mvel"
    
when
	  $result : ServiceUserBean()
      $inter : SubstanceAccumBean(substance =="Opiate", accum == 2) from $result.subAccums
then
 	
	cmsQueryEligibility.changeEligibility($result,3,1);
       
end

rule "(Stream 1) service user is entitled to 1 weekend TA - Benzodiazepine positive"
    lock-on-active true
    no-loop true
    dialect "java"
when
	  $result : ServiceUserBean(streamDetails.supportLevel == 1)
      $inter : SubstanceAccumBean(substance =="Benzodiazepine", accum == 0) from $result.subAccums
then
	for(int i=0; i < $result.getEligibilityBeans().size(); i++)
	{
	 	if($result.getEligibilityBeans().get(i).getId().equals("4") && $result.getEligibilityBeans().get(i).getAmount() <2 )
	 	{
			cmsQueryEligibility.changeEligibility($result,4,$result.getEligibilityBeans().get(i).getAmount() + 1);
		}
	   
	}
    
end

rule "(Stream 1) Service user is entitled to 1 weekend TA - Stimulant positive"
    lock-on-active true
    no-loop true
    dialect "java"
when
	  $result : ServiceUserBean(streamDetails.supportLevel == 1)
      $inter : SubstanceAccumBean(substance =="Stimulant", accum == 0) from $result.subAccums
then
	for(int i=0; i < $result.getEligibilityBeans().size(); i++)
	{
	 	if($result.getEligibilityBeans().get(i).getId().equals("4") && $result.getEligibilityBeans().get(i).getAmount() <2 )
	 	{
			cmsQueryEligibility.changeEligibility($result,4,$result.getEligibilityBeans().get(i).getAmount() + 1);
			
		}
	   
	}
    
end

rule "Service user is entitled to 2 weekday TA"
    lock-on-active true
    no-loop true
    dialect "mvel"
    
when
	  $result : ServiceUserBean(streamDetails.supportLevel != 1)
      $inter : SubstanceAccumBean(substance =="Opiate", accum == 4) from $result.subAccums
then
 	
	cmsQueryEligibility.changeEligibility($result,3,2);
   
    
end

/*rule "service user is entitled to 3 weekday TA"
    lock-on-active true
    no-loop true
    dialect "mvel"
    
when
	  $result : ServiceUserBean(streamDetails.supportLevel != 1)
      $inter : SubstanceAccumBean(substance =="Opiate", accum == 4) from $result.subAccums
then
 	
	cmsQueryEligibility.changeEligibility($result,3,3);
   System.out.println("service user get 1 TA- Service user Id="+$result.getId());
    
end*/

rule "(Stream 2) Service user is entitled to weekend TA"
    lock-on-active true
    no-loop true
    dialect "java"
    
when
	  $result : ServiceUserBean(streamDetails.supportLevel != 1 ,dateToClean.card == "none" )
	  
then
 	List<SubstanceBean> substances = cmsQuerySubstance.qrySubstances(null, "Y");
 	int countReq =0;
 	int countHave =0;
 	for(int i =0; i< substances.size(); i++)
 	{
 		
 		if(substances.get(i).getStreamRegressionFlag().equals("Y") )
 		{
 			countReq++;
 			if(substances.get(i).getSubstance().equals($result.getSubAccums().get(i).getSubstance()) && $result.getSubAccums().get(i).getAccum() >=3)
 			{
 			countHave ++;
 			}
 		}
 		
 	}
 	
 	if(countReq == countHave)
	{ 
	   cmsQueryEligibility.changeEligibility($result,4,2);
	   
	 }
    
end

rule "(Stream 2) Service user is NOT entitled to weekend TA - Substance abuse"
    lock-on-active true
    no-loop true
   dialect "java"
    
when
	  $result : ServiceUserBean(streamDetails.supportLevel != 1 ,dateToClean.card != "none" )
then
 	
   cmsQueryEligibility.changeEligibility($result,4,0);
   
    
end


rule "Service user looses a weekday TA due to alcohol intoxication"
    lock-on-active true
    no-loop true
    dialect "java"
when
	  $result : ServiceUserBean()
      $inter : SubstanceAccumBean(substance.equals("Alcohol"), accum == 0) from $result.subAccums
then
 	
 	int amount =0;
	for(int i=0; i < $result.getEligibilityBeans().size(); i++)
	{
		if($result.getEligibilityBeans().get(i).getId().toString().equals("3") && $result.getEligibilityBeans().get(i).getAmount()!=0 )
		{
		    amount = $result.getEligibilityBeans().get(i).getAmount() - 1;
		}
	}
 	cmsQueryEligibility.changeEligibility($result,3,amount);
   
    
end

